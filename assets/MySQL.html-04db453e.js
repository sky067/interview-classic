import{_ as a,p as n,q as e,a1 as s}from"./framework-5866ffd3.js";const l={},i=s('<h1 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> Mysql</h1><h2 id="一、数据库三范式" tabindex="-1"><a class="header-anchor" href="#一、数据库三范式" aria-hidden="true">#</a> 一、数据库三范式</h2><h2 id="二、索引" tabindex="-1"><a class="header-anchor" href="#二、索引" aria-hidden="true">#</a> 二、索引</h2><h3 id="_1-索引的类型-五种类型" tabindex="-1"><a class="header-anchor" href="#_1-索引的类型-五种类型" aria-hidden="true">#</a> 1. 索引的类型（五种类型）</h3><ol><li><p>普通索引</p><ul><li>允许空值和重复值。</li></ul></li><li><p>唯一索引</p><ul><li>唯一索引与普通索引的区别：唯一索引所在列值不允许重复。</li></ul></li><li><p>主键索引</p><ul><li>特殊的唯一索引，不允许有空值。</li></ul></li><li><p>联合索引</p><ul><li><p>在多个字段上创建索引，使用时遵循最左前缀原则</p></li><li><p>联合索引的最左前缀原则</p><ul><li><p>最左前缀举例</p><ul><li>创建了一个包含三列的联合索引<code>(col1, col2, col3)</code>，索引生效于<code>(col1), (col1, col2), and (col1, col2, col3)</code>。</li></ul></li><li><p>https://juejin.cn/post/6876046792056635405</p></li></ul></li></ul></li><li><p>空间索引</p></li></ol><h3 id="_2-索引的底层结构" tabindex="-1"><a class="header-anchor" href="#_2-索引的底层结构" aria-hidden="true">#</a> 2. 索引的底层结构</h3><h3 id="_3-如何创建索引" tabindex="-1"><a class="header-anchor" href="#_3-如何创建索引" aria-hidden="true">#</a> 3. 如何创建索引</h3><h4 id="_3-1-创建普通索引-三种方式" tabindex="-1"><a class="header-anchor" href="#_3-1-创建普通索引-三种方式" aria-hidden="true">#</a> 3.1 创建普通索引（三种方式）</h4><ol><li>建表时创建索引</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>table_name<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  \n<span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token punctuation">,</span>  \n<span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>  \n<span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  \n<span class="token keyword">INDEX</span> index_name <span class="token punctuation">(</span>name<span class="token punctuation">)</span>  \n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span>  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用<code>create index</code>直接创建</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>使用<code>alter table</code>以修改表结构的方式添加索引</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> <span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2-创建唯一索引" tabindex="-1"><a class="header-anchor" href="#_3-2-创建唯一索引" aria-hidden="true">#</a> 3.2 创建唯一索引</h4><h4 id="_3-2-创建主键索引" tabindex="-1"><a class="header-anchor" href="#_3-2-创建主键索引" aria-hidden="true">#</a> 3.2 创建主键索引</h4><h4 id="_3-2-创建唯一索引-1" tabindex="-1"><a class="header-anchor" href="#_3-2-创建唯一索引-1" aria-hidden="true">#</a> 3.2 创建唯一索引</h4><h3 id="_4-如何删除索引" tabindex="-1"><a class="header-anchor" href="#_4-如何删除索引" aria-hidden="true">#</a> 4. 如何删除索引</h3><p><code>DROP INDEX index_name ON table_name; </code></p><h3 id="_5-查看索引是否被引用" tabindex="-1"><a class="header-anchor" href="#_5-查看索引是否被引用" aria-hidden="true">#</a> 5. 查看索引是否被引用</h3><h2 id="三、锁-悲观锁、乐观锁" tabindex="-1"><a class="header-anchor" href="#三、锁-悲观锁、乐观锁" aria-hidden="true">#</a> 三、锁（悲观锁、乐观锁）</h2><h3 id="_1-悲观锁-读锁、写锁" tabindex="-1"><a class="header-anchor" href="#_1-悲观锁-读锁、写锁" aria-hidden="true">#</a> 1. 悲观锁（读锁、写锁）</h3><p>悲观锁认为每次修改数据时，都会有其他线程来修改数据。</p><ul><li><p>悲观锁分为<code>读锁</code>和<code>写锁</code></p></li><li><p>sql语句使用 <code>for update</code> 上悲观锁。</p><ul><li><p>使用方法（用在select语句上）： <code>select * from table where id=1 for update</code></p></li><li><p>注意：<code>for update</code> 仅适用于<code>InnoDB</code>，并且必须开启<strong>事务</strong>，在<code>begin与commit</code>之间才生效。</p></li></ul></li></ul><h4 id="_1-1-读锁-共享锁-shared-lock" tabindex="-1"><a class="header-anchor" href="#_1-1-读锁-共享锁-shared-lock" aria-hidden="true">#</a> 1.1 读锁（共享锁（shared lock））</h4><ul><li>多个事务共享一个锁，都可以访问数据。</li><li>只可读，不可修改数据。</li></ul><h4 id="_1-2-读锁-排他锁-exclusive-lock" tabindex="-1"><a class="header-anchor" href="#_1-2-读锁-排他锁-exclusive-lock" aria-hidden="true">#</a> 1.2 读锁（排他锁（exclusive lock））</h4><ul><li>排他锁被一个事务获取后，该数据行无法被其他事务获取锁。</li><li>排他锁对数据可读可改。</li></ul><p>悲观锁总结：</p><ul><li>悲观锁先锁定行数据，再进行访问。</li><li>优点：保证了数据的安全性</li><li>缺点：降低了并行性，增加了死锁的风险</li></ul><h3 id="_2-乐观锁" tabindex="-1"><a class="header-anchor" href="#_2-乐观锁" aria-hidden="true">#</a> 2. 乐观锁</h3><p>乐观锁在更新数据时，才进行加锁判断。 适用与读多写少的场景。</p><p>乐观锁不需要借助数据库的锁机制。</p><ul><li><p>乐观锁实现：</p><ol><li><p>首先查询一遍数据，</p></li><li><p>在update之前，再次查询一遍数据，如果数据未改变，则update</p></li><li><p>常用方法是在表中增加一个字段version，每次更新使 version + 1，并在更新前后，且在version+1前都读取version来判断是否一致</p></li></ol></li></ul><p>乐观锁总结：</p><ul><li>实现乐观锁两个步骤： <ol><li>检测冲突。</li><li>数据更新。</li></ol></li></ul><h2 id="锁的级别" tabindex="-1"><a class="header-anchor" href="#锁的级别" aria-hidden="true">#</a> 锁的级别</h2><p>锁的级别分为行级锁和表级锁</p><h3 id="_1-行级锁" tabindex="-1"><a class="header-anchor" href="#_1-行级锁" aria-hidden="true">#</a> 1. 行级锁</h3><ul><li><p>行级锁都是基于索引的。</p></li><li><p>如果一条 SQL 语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意。</p></li><li><p>InnoDB 默认行级锁。</p></li></ul><h3 id="_2-表级锁" tabindex="-1"><a class="header-anchor" href="#_2-表级锁" aria-hidden="true">#</a> 2. 表级锁</h3><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><h3 id="_1-事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#_1-事务的隔离级别" aria-hidden="true">#</a> 1. 事务的隔离级别</h3><p>4中隔离级别</p><ol><li><p>读已提交</p></li><li><p>读未提交</p><ul><li>也叫脏读</li><li>事务可以读取其他事务未提交的数据</li></ul></li><li><p>可重复读</p><ul><li>mysql的默认隔离级别</li></ul></li><li><p>串行化</p></li><li><p>幻读</p></li></ol>',45),o=[i];function p(d,t){return n(),e("div",null,o)}const r=a(l,[["render",p],["__file","MySQL.html.vue"]]);export{r as default};
